# DRY     ( count )  SELECT COUNT(*) FROM customer {{..}}
# {
#         GET    /customer/count            ->                               ;
#         GET    /customer/area/:id/count   ->   WHERE area_id = {{:id}}     ;
#         GET    /customer/dormant/count    ->   WHERE is_active = false     ;
#         POST   /customer/search/count     ->   WHERE lower(customer.name) 
#                                                LIKE lower({{q}})           ;     
# }
# 
# DRY     ( id                                                                 
#         , name                                                               
#         , address                                                      
#         , created                                                            
#         , latitude                                                           
#         , longitude                                                          
#         , tin                                                                
#         , phone                                                              
#         , isActive                                                           
#         , areaId                                                             
#         , priceCatId                                                         
#         , area
#         , priceCategory )                                                                    
#                                                                              
#         SELECT customer.id                                                   
#              , customer.name                                                 
#              , customer.address                                       
#              , customer.created                                              
#              , customer.latitude                                             
#              , customer.longitude                                            
#              , customer.tin                                                  
#              , customer.phone                                                
#              , customer.is_active                                            
#              , customer.area_id                                              
#              , customer.price_cat_id                                         
#              , area.name                                                     
#              , product_price_category.name                                   
#         FROM customer                                                        
#           JOIN area                                                          
#             ON area.id = customer.area_id                                    
#           JOIN product_price_category                                        
#             ON product_price_category.id = customer.price_cat_id             
#         {{..}}
# {
#     GET    /customer/offset/:offs/limit/:lim           >> 
#         ORDER BY customer.id 
#         LIMIT {{:lim}} OFFSET {{:offs}}                 ;
# 
#     GET    /customer/area/:id/offset/:offs/limit/:lim  >> 
#         WHERE customer.area_id = {{:id}} 
#         ORDER BY customer.id 
#         LIMIT {{:lim}} OFFSET {{:offs}}                 ;
# 
#     GET    /customer/dormant/offset/:offs/limit/:lim   >>
#         WHERE customer.is_active = false
#         ORDER BY customer.id 
#         LIMIT {{:lim}} OFFSET {{:offs}}                 ;
# 
#     POST   /customer/search/offset/:offs/limit/:lim    >>
#          WHERE lower(customer.name) LIKE lower({{q}})    
#          ORDER BY customer.id 
#          LIMIT {{:lim}} OFFSET {{:offs}}                ;
# 
#     POST   /customer/search                            >>
#          WHERE lower(customer.name) LIKE lower({{q}})   ;
# 
#     GET    /customer/:id                               ->
#          WHERE customer.id = {{:id}}                    ;
# 
#     GET    /customer                                   >>
#          ORDER BY customer.id                           ;
# }
# 
# DRY     ( count )  SELECT COUNT(*) FROM product {{..}}
# {
#         GET    /product/count             ->                               ;
#         POST   /product/search/count      ->  WHERE lower(product.name) 
#                                               LIKE lower({{q}})            ;
# }
# 
# DRY     ( id
#         , deleted
#         , description
#         , name
#         , unitSize )
#                                                                             
#         SELECT product.id
#              , product.deleted
#              , product.description
#              , product.name
#              , product.unit_size
#         FROM product 
#         {{..}}
# {
#     GET    /product/offset/:offs/limit/:lim            >>
#         ORDER by product.name
#         LIMIT {{:lim}} OFFSET {{:offs}}                 ;
# 
#     GET    /product/:id                                ->
#         WHERE product.id = {{:id}}                      ;
# 
#     POST   /product/search/offset/:offs/limit/:lim     >>
#         WHERE lower(product.name) 
#         LIKE lower({{q}})                                
#         LIMIT {{:lim}} OFFSET {{:offs}}                 ;
# }
# 
# GET    /product-stock/depot/:id/count  ->  ( count )  SELECT COUNT(*) FROM depot_stock WHERE depot_id = {{:id}} 
# 
# GET    /product-stock/depot/:id/offset/:offs/limit/:lim  >>
# 
#         ( id
#         , productId
#         , depotId
#         , quantity
#         , productName )
# 
#         SELECT depot_stock.id
#              , depot_stock.product_id
#              , depot_stock.depot_id
#              , depot_stock.quantity
#              , product.name
#         FROM depot_stock
#         JOIN product
#           ON product.id = depot_stock.product_id
#         WHERE depot_stock.depot_id = {{:id}}
#         ORDER BY
#           depot_stock.product_id
#         LIMIT 
#           {{:lim}}
#         OFFSET 
#           {{:offs}}
# 
# POST   /product-stock  ->
# 
#         ( id
#         , productId
#         , depotId
#         , quantity
#         , productName )
# 
#         SELECT depot_stock.id
#              , depot_stock.product_id
#              , depot_stock.depot_id
#              , depot_stock.quantity
#              , product.name
#         FROM depot_stock
#         JOIN product
#           ON product.id = depot_stock.product_id
#         WHERE depot_stock.product_id = {{productId}}
#           AND depot_stock.depot_id = {{depotId}}
# 
# POST   /product-stock/products  ->
# 
#         ( id
#         , productId
#         , depotId
#         , quantity
#         , productName )
# 
#         SELECT depot_stock.id
#              , depot_stock.product_id
#              , depot_stock.depot_id
#              , depot_stock.quantity
#              , product.name
#         FROM depot_stock
#         JOIN product
#           ON product.id = depot_stock.product_id
#         WHERE depot_stock.product_id IN {{products}}
#           AND depot_stock.depot_id = {{depotId}}
# 
# GET    /product-price/product/:id  >>
# 
#         SELECT id
#              , price 
#              , price_cat_id 
#              , product_id
#         FROM product_price
#         WHERE product_id = {{:id}}
# 
# POST   /product-price  >>
# 
#         SELECT id
#              , price 
#              , price_cat_id 
#              , product_id
#         FROM product_price
#         WHERE product_id IN ({{products}})
#         ORDER BY 
#           id
# 
# POST   /authenticate  -> 
# 
#         ( id, username, name, role, depotId )
# 
#         SELECT sphere_user.id
#              , sphere_user.username
#              , sphere_user.name
#              , sphere_user.role
#              , sphere_user.depot_id
#         FROM sphere_user
#         WHERE sphere_user.username = {{username}}
#           AND sphere_user.password = crypt( {{password}}, sphere_user.password )
# 
# POST   /user  <>
# 
#         INSERT INTO sphere_user 
#           ( name
#           , password
#           , role
#           , salt
#           , username
#           , depot_id 
#           ) VALUES 
#             ( {{name}} 
#             , crypt( {{password}}, gen_salt('md5') )
#             , {{role}}
#             , gen_salt('md5')
#             , {{username}} 
#             , {{depotId}}
#             )
# 
# # temp
# POST   /customer  <> 
# 
#         INSERT INTO region (name) VALUES 
#             ( {{name}} )
# 

# GET    /order/:id  ->
# 
#         ( id
#         , created
#         , customerId
#         , lastChange
#         , status
#         , userId 
#         , customerId 
#         , customerName 
#         , areaId 
#         , depotId )
# 
#         SELECT oo.id
#              , oo.created
#              , oo.customer_id
#              , oo.last_change
#              , oo.status
#              , oo.user_id
#              , c.id
#              , c.name
#              , c.area_id
#              , a.depot_id
#         FROM order_object oo
#           JOIN customer c
#             ON c.id = oo.customer_id
#           LEFT JOIN area a
#             ON a.id = c.area_id
#         WHERE oo.id = {{:id}}
# DRY      ( id
#          , categoryId
#          , limit
#          , productId )
# 
#          SELECT pl.id
#               , pl.category_id
#               , pl.load_limit
#               , pl.product_id
#          FROM product p
#          LEFT JOIN product_limit pl
#            ON pl.product_id = p.id
#          {{..}}
# {
#     GET /product-limit/product/:id  >>
# 
#          WHERE p.id = {{:id}} ;
# 
#     POST /product-limit  >>
# 
#          WHERE p.id 
#            IN ({{productIds}})
#          ORDER BY 
#            p.name
# }
# DRY      ( id
#          , price
#          , priceCatId
#          , productId )
# 
#          SELECT pp.id
#               , pp.price
#               , pp.price_cat_id
#               , p.id
#          FROM product p
#          LEFT JOIN product_price pp 
#            ON pp.product_id = p.id
#          {{..}}
# {
#     GET /product-price/product/:id  >>
# 
#          WHERE p.id = {{:id}} ;
# 
#     POST /product-price  >>
# 
#          WHERE p.id 
#             IN ({{productIds}})
#          ORDER BY 
#            p.name
#          , pp.price_cat_id
# }

# DRY      ( id
#          , productId
#          , productName
#          , depotId
#          , quantity )
# 
#          SELECT ds.id
#               , p.id
#               , p.name
#               , ds.depot_id
#               , ds.quantity
#          FROM product p
#          LEFT JOIN depot_stock ds
#            ON ds.product_id = p.id
#          {{..}}
# {
#     GET /product-stock/product/:id  >>
# 
#          WHERE p.id = {{:id}} ;
# 
#     POST /product-stock  >>
# 
#          AND ds.depot_id = {{depotId}}
#          WHERE p.id 
#            IN ({{productIds}})
#          ORDER BY 
#            p.name
# }

 
# GET     /order-product/:id  >>
# 
#          ( id
#          , deleted 
#          , description
#          , name 
#          , unitSize 
#          , orderId
#          , quantity 
#          , price )
# 
#          SELECT p.id
#               , p.deleted
#               , p.description
#               , p.name
#               , p.unit_size 
#               , op.order_id
#               , op.quantity
#               , op.price
#          FROM product p
#          JOIN order_product op
#            ON op.product_id = p.id
#          WHERE op.order_id = {{:id}} ;
#  
# POST /order-product  >>
# 
#          ( id
#          , deleted 
#          , description
#          , name 
#          , unitSize )
# 
#          SELECT p.id
#               , p.deleted
#               , p.description
#               , p.name
#               , p.unit_size 
#               , op.order_id
#               , op.quantity
#               , op.price
#          FROM product p
#           JOIN order_product op
#            ON op.product_id = p.id
#          WHERE op.order_id 
#            IN ({{orderIds}}) ;
 
POST   /!order  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/order",
            "fields" : ["datetime", "customerId", "userId"]
        }
    ],
    "connections": [
        {
            "destination"  : 1,
            "transformers" : [],
            "filters"      : []
        }
    ]
}

DRY      ( id
         , deleted 
         , description
         , name 
         , unitSize 
         , orderId
         , quantity 
         , price )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
              , op.order_id
              , op.quantity
              , op.price
         FROM product p
         JOIN order_product op
           ON op.product_id = p.id
         {{..}}
{
    GET /order-product/:id  >>

         WHERE op.order_id = {{:id}} ;
         ORDER BY 
           p.name ;
 
    POST /order-product  >>

         WHERE op.order_id 
           IN ({{orderIds}}) 
         ORDER BY 
           p.name
}

GET    /order/depot/:id/count  ->  ( count )

        SELECT COUNT(*) FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        LEFT JOIN area a
          ON a.id = c.area_id
        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )

GET    /order  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
 
DRY     ( id
        , created
        , customerId
        , lastChange
        , status
        , userId 
        , customerId 
        , customerName 
        , areaId 
        , depotId )

        SELECT oo.id
             , oo.created
             , oo.customer_id
             , oo.last_change
             , oo.status
             , oo.user_id
             , c.id
             , c.name
             , c.area_id
             , a.depot_id
        FROM order_object oo
          JOIN customer c
            ON c.id = oo.customer_id
          LEFT JOIN area a
            ON a.id = c.area_id
        {{..}}
{
    GET /order/:id  ->

        WHERE oo.id = {{:id}} ;

    GET /order/depot/:id/limit/:limit/offset/:offset  >>

        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/limit/:limit/offset/:offset  >>

        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} 
}

GET     /price-category  >>

         SELECT id, name
         FROM product_price_category
         ORDER BY id

GET     /weight-category  >>

         SELECT id, name
         FROM weight_category 
         ORDER BY id

GET     /customer/depot/:id/count  ->  ( count )

         SELECT COUNT(*) FROM customer c
         WHERE c.is_active = true
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} 
             )

DRY      ( id                                                                 
         , name                                                               
         , address                                                      
         , created                                                            
         , latitude                                                           
         , longitude                                                          
         , tin                                                                
         , phone                                                              
         , isActive                                                           
         , areaId                                                             
         , priceCatId                                                         
         , areaName                                                           
         , priceCategory )                                                                    

         SELECT c.id
              , c.name
              , c.address
              , c.created
              , c.latitude
              , c.longitude
              , c.tin
              , c.phone
              , c.is_active
              , c.area_id
              , c.price_cat_id
              , a.name
              , ppc.name
         FROM customer c
           JOIN area a
             ON a.id = c.area_id
           JOIN product_price_category ppc
             ON ppc.id = c.price_cat_id
         {{..}} 
{
    GET /customer/depot/:id/limit/:limit/offset/:offset  >>

         WHERE c.is_active = true
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} 
             )
         ORDER BY
           c.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
    GET /customer/:id  ->

         WHERE c.id = {{:id}}
}
  
GET     /stock/depot/:id/count  ->  ( count )  

         SELECT COUNT(*) 
         FROM depot_stock ds
         JOIN product p
           ON p.id = ds.product_id
         WHERE ds.depot_id = {{:id}}
 
GET     /stock/depot/:id/limit/:limit/offset/:offset  >>

         ( id
         , productId
         , productName
         , depotId
         , quantity )

         SELECT ds.id
              , ds.product_id
              , p.name
              , ds.depot_id
              , ds.quantity
         FROM depot_stock ds
         JOIN product p
           ON p.id = ds.product_id
         WHERE ds.depot_id = {{:id}}
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
POST    /product/search/count  ->  ( count )  

         SELECT COUNT(*) FROM product 
         WHERE lower(name) 
          LIKE lower({{q}})

GET     /product/count  ->  ( count )  

         SELECT COUNT(*) FROM product

POST    /product/search/price/limit/:limit/offset/:offset  >>

         ( id
         , deleted 
         , description
         , name 
         , unitSize 
         , assignedPrice )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
              , pp.price
         FROM product p
         LEFT JOIN product_price pp
           ON pp.product_id = p.id
          AND pp.price_cat_id = {{priceCatId}}
         WHERE lower(p.name) 
          LIKE lower({{q}})
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
DRY      ( id
         , deleted 
         , description
         , name 
         , unitSize )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
         FROM product p
         {{..}}
{
    POST /product/search/limit/:limit/offset/:offset  >>

         WHERE lower(p.name) 
          LIKE lower({{q}})
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;

    GET /product/limit/:limit/offset/:offset  >>

         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;

    GET /product/:id  ->

         WHERE p.id = {{:id}} 
}

DRY      ( id
         , price
         , priceCatId
         , productId )

         SELECT id
              , price
              , price_cat_id
              , product_id
         FROM product_price 
         {{..}}
{
    GET /product-price/product/:id  >>

         WHERE product_id = {{:id}} ;

    POST /product-price  >>

         WHERE product_id
            IN ({{productIds}})
         ORDER BY 
           price_cat_id
}

DRY      ( id
         , productId
         , productName
         , depotId
         , quantity )

         SELECT ds.id
              , ds.product_id
              , p.name
              , ds.depot_id
              , ds.quantity
         FROM depot_stock ds
         JOIN product p
           ON ds.product_id = p.id
         {{..}}
{
    GET /product-stock/product/:id  >>

         WHERE ds.product_id = {{:id}} ;

    POST /product-stock  >>

         AND ds.depot_id = {{depotId}}
         WHERE ds.product_id 
           IN ({{productIds}})
         ORDER BY 
           ds.id
}

DRY      ( id
         , categoryId
         , limit
         , productId )

         SELECT id
              , category_id
              , load_limit
              , product_id
         FROM product_limit 
         {{..}}
{
    GET /product-limit/product/:id  >>

         WHERE product_id = {{:id}} ;

    POST /product-limit  >>

         WHERE product_id 
           IN ({{productIds}})
         ORDER BY 
           id
}

POST    /authenticate  ->  (id, username, name, role, depotId)
    
         SELECT sphere_user.id
              , sphere_user.username
              , sphere_user.name
              , sphere_user.role
              , sphere_user.depot_id
         FROM sphere_user
         WHERE sphere_user.username = {{username}}
           AND sphere_user.password = crypt({{password}}, sphere_user.password)

